<?xml version="1.0"?>
<!DOCTYPE profile>
<profile xmlns="http://www.suse.com/1.0/yast2ns" xmlns:config="http://www.suse.com/1.0/configns">
  <general>
    <mode>
      <confirm config:type="boolean">false</confirm>
      <ntp_sync_time_before_installation>ntp.suse.de</ntp_sync_time_before_installation>
    </mode>
    <signature-handling>
      <accept_unknown_gpg_key>
        <all config:type="boolean">true</all>
      </accept_unknown_gpg_key>
    </signature-handling>
  </general>

  <scripts>

    <pre-scripts config:type="list">
      <script>
        <filename>1_prescript.sh</filename>
        <interpreter>shell</interpreter>
        <location/>
        <feedback config:type="boolean">false</feedback>
        <feedback_type>error</feedback_type>
        <source><![CDATA[#!/bin/sh
BASE='/root/userscripts'
STR="1:prescript:"
ST='clean'
RES=`fdisk -l | grep -E '^/dev/vda'`
if [ -n "$RES" ];then
   STR=$STR'partition already defined:'
   ST='exist'
else
   STR=$STR'not yet mounted:'
fi
STR=$STR$ST
mkdir $BASE
echo $STR
echo $STR > $BASE/userscr.log
#cp /tmp/1_prescript.sh $BASE
        ]]></source>
      </script>
      <script>
        <filename>1b_prescript_remote.sh</filename>
        <interpreter>shell</interpreter>
        <source><![CDATA[#!/bin/sh
STR="1b:prescript-remote:ok"
BASE='/root/userscripts'
echo $STR
echo $STR >> $BASE/userscr.log
        ]]></source>
        <feedback config:type="boolean">false</feedback>
	<feedback_type>error</feedback_type>
      </script>
    </pre-scripts>

    <post-scripts config:type="list">
      <script>
        <filename>yast_clone.sh</filename>
        <interpreter>shell</interpreter>
        <location/>
        <feedback config:type="boolean">false</feedback>
        <source><![CDATA[#!/bin/sh
mv /var/run/zypp.pid /var/run/zypp.sav
yast clone_system
mv /var/run/zypp.sav /var/run/zypp.pid
        ]]></source>
      </script>
      <script>
        <filename>post-script.sh</filename>
        <interpreter>shell</interpreter>
        <location/>
        <feedback config:type="boolean">false</feedback>
        <source><![CDATA[#!/bin/sh
chmod 755 /srv/tftpboot
        ]]></source>
      </script>
      <script>
        <filename>4_post.sh</filename>
        <interpreter>shell</interpreter>
        <location/>
        <feedback config:type="boolean">false</feedback>
	<feedback_type>error</feedback_type>
        <source><![CDATA[#!/bin/sh
STR="4:postinstall:"
ST='ok'
BASE='/root/userscripts'
if [ -e /rebootflag ];then
  STR=$STR' no final reboot!:'
  ST='fail'
else
  STR=$STR'reboot detected:'
fi
STR=$STR$ST
echo $STR
echo $STR >> $BASE/userscr.log
#cp /tmp/4_post.sh $BASE
ls -l $BASE
        ]]></source>
        <network_needed config:type="boolean">false</network_needed>
      </script>
    </post-scripts>

    <postpartitioning-scripts config:type="list">
      <script>
        <filename>2_postpartitioning.sh</filename>
        <interpreter>shell</interpreter>
        <location/>
        <feedback config:type="boolean">false</feedback>
	<feedback_type>error</feedback_type>
        <source><![CDATA[#!/bin/sh
STR="2:postpartitioning:"
ST='ok'
BASE='/root/userscripts'
RES=`df -T /dev/vda2 | grep -E '^/dev' | sed -r 's@.*\s+(.*)$@\1@'`
STR=$STR"sda2 mounted on "$RES":"
if [ "$RES" != '/mnt' ];then
   STR=$STR"invalid mountpoint!:"
   ST='fail'
fi
RES=`chroot /mnt rpm -qa | wc -l`
STR=$STR"rpm count "$RES":"
if [ "$RES" -ne '0' ];then
   STR=$STR' rpms already installed!:'
   ST='fail'
fi
STR=$STR$ST
echo $STR
echo $STR >> $BASE/userscr.log
#cp /tmp/2_postpartitioning.sh $BASE
        ]]></source>
      </script>
    </postpartitioning-scripts>

    <chroot-scripts config:type="list">
      <script>
        <filename>3_chroot.sh</filename>
        <interpreter>shell</interpreter>
        <location/>
        <feedback config:type="boolean">false</feedback>
	<feedback_type>error</feedback_type>
        <source><![CDATA[#!/bin/sh
STR="3:chroot:"
ST='ok'
BASE='/root/userscripts'
if chroot /mnt rpm -q glibc ;then
  STR=$STR' glibc installed:'
else
  STR=$STR' glibc not installed!:'
  ST='fail'
fi
STR=$STR$ST
echo $STR
echo $STR >> $BASE/userscr.log
touch /rebootflag
#cp /tmp/3_chroot.sh $BASE
ls -l $BASE
mv $BASE /mnt/$BASE
ls -l /mnt/$BASE
        ]]></source>
      <chrooted config:type="boolean">false</chrooted>

      </script>
    </chroot-scripts>

    <init-scripts config:type="list">
      <script>
        <filename>init_ssh.sh</filename>
        <chrooted config:type="boolean">true</chrooted>
        <interpreter>shell</interpreter>
        <source><![CDATA[
  chkconfig sshd on
  rcsshd start
]]></source>
      </script>
      <script>
        <filename>5_post.sh</filename>
        <interpreter>shell</interpreter>
        <location/>
        <feedback config:type="boolean">false</feedback>
        <feedback_type>error</feedback_type>
        <source><![CDATA[#!/bin/sh
      STR="5:init:"
      PARENT='/usr/lib/YaST2/bin/autoyast-initscripts.sh'
      BASE='/root/userscripts'
      PPIDNAME=`ps -p $PPID -fh -o cmd`
      STR=$STR"started by: $PPID = $PPIDNAME:"
      BPPIDNAME=`echo "$PPIDNAME" | sed -r s'@^(.*)\s@@'`
      ST='ok'
      if [ "$PARENT" != "$BPPIDNAME" ];then
        STR=$STR':incorrect parent:'
        ST='fail'
      else
        STR=$STR':parent correct:'
      fi
      STR=$STR$ST
      echo $STR
      echo $STR >> $BASE/userscr.log
      ls -l $BASE
      ]]></source>
        <network_needed config:type="boolean">false</network_needed>
      </script>

    </init-scripts>
  </scripts>

  <networking>
    <net-udev config:type="list">
      <rule>
        <name>eth0</name>
        <rule>ATTR{address}</rule>
        <value>{{MAC1}}</value>
      </rule>
    </net-udev>
  </networking>

  <report>
    <errors>
      <log config:type="boolean">true</log>
      <show config:type="boolean">true</show>
      <timeout config:type="integer">5</timeout>
    </errors>
    <messages>
      <log config:type="boolean">true</log>
      <show config:type="boolean">true</show>
      <timeout config:type="integer">5</timeout>
    </messages>
    <warnings>
      <log config:type="boolean">true</log>
      <show config:type="boolean">true</show>
      <timeout config:type="integer">5</timeout>
    </warnings>
    <yesno_messages>
      <log config:type="boolean">true</log>
      <show config:type="boolean">true</show>
      <timeout config:type="integer">5</timeout>
    </yesno_messages>
  </report>
  <software>
    <install_recommended config:type="boolean">false</install_recommended>
    <patterns config:type="list">
      <pattern>Minimal</pattern>
      <pattern>base</pattern>
    </patterns>
    <packages config:type="list">
      <package>syslinux</package>
      <!-- The following packages are needed to run postinstall.sh -->
      <package>sudo</package>
      <package>ca-certificates-mozilla</package>
    </packages>
  </software>
  <users config:type="list">
    <user>
      <encrypted config:type="boolean">false</encrypted>
      <fullname>vagrant</fullname>
      <gid>100</gid>
      <home>/home/vagrant</home>
      <shell>/bin/bash</shell>
      <uid>1000</uid>
      <user_password>nots3cr3t</user_password>
      <username>vagrant</username>
    </user>
    <user>
      <encrypted config:type="boolean">false</encrypted>
      <fullname>root</fullname>
      <gid>0</gid>
      <home>/root</home>
      <shell>/bin/bash</shell>
      <uid>0</uid>
      <user_password>nots3cr3t</user_password>
      <username>root</username>
    </user>
  </users>
</profile>
