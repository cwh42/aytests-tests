<?xml version="1.0"?>
<!DOCTYPE profile>
<profile xmlns="http://www.suse.com/1.0/yast2ns" xmlns:config="http://www.suse.com/1.0/configns">
  <bootloader>
    <global>
      <generic_mbr>true</generic_mbr>
      <gfxmode>auto</gfxmode>
      <hiddenmenu>false</hiddenmenu>
      <os_prober>false</os_prober>
      <terminal>gfxterm</terminal>
      <timeout config:type="integer">8</timeout>
      <suse_btrfs config:type="boolean">true</suse_btrfs>
      <append>elevator=noop</append>
    </global>
  </bootloader>
  <general>
    <ask-list config:type="list"/>
    <mode>
      <confirm config:type="boolean">false</confirm>
      <ntp_sync_time_before_installation>ntp.suse.de</ntp_sync_time_before_installation>
    </mode>
    <proposals config:type="list"/>
    <storage>
      <partition_alignment config:type="symbol">align_optimal</partition_alignment>
      <start_multipath config:type="boolean">false</start_multipath>
    </storage>
  </general>
  <partitioning config:type="list">
    <drive>
      <device>/dev/vda</device>
      <disklabel>msdos</disklabel>
      <enable_snapshots config:type="boolean">true</enable_snapshots>
      <initialize config:type="boolean">true</initialize>
      <partitions config:type="list">
        <partition>
          <create config:type="boolean">true</create>
          <crypt_fs config:type="boolean">false</crypt_fs>
          <filesystem config:type="symbol">swap</filesystem>
          <format config:type="boolean">true</format>
          <loop_fs config:type="boolean">false</loop_fs>
          <mount>swap</mount>
          <mountby config:type="symbol">uuid</mountby>
          <partition_id config:type="integer">130</partition_id>
          <partition_nr config:type="integer">1</partition_nr>
          <resize config:type="boolean">false</resize>
          <size>auto</size>
        </partition>
        <partition>
          <create config:type="boolean">true</create>
          <crypt_fs config:type="boolean">false</crypt_fs>
          <filesystem config:type="symbol">btrfs</filesystem>
          <format config:type="boolean">true</format>
          <loop_fs config:type="boolean">false</loop_fs>
          <mount>/</mount>
          <mountby config:type="symbol">uuid</mountby>
          <partition_id config:type="integer">131</partition_id>
          <partition_nr config:type="integer">3</partition_nr>
          <resize config:type="boolean">false</resize>
          <size>max</size>
          <subvolumes config:type="list">
            <listentry>boot/grub2/i386-pc</listentry>
            <listentry>boot/grub2/x86_64-efi</listentry>
            <listentry>home</listentry>
            <listentry>opt</listentry>
            <listentry>srv</listentry>
            <listentry>tmp</listentry>
            <listentry>usr/local</listentry>
            <listentry>var/crash</listentry>
            <listentry>var/lib/mailman</listentry>
            <listentry>var/lib/named</listentry>
            <listentry>var/log</listentry>
            <listentry>var/opt</listentry>
            <listentry>var/spool</listentry>
            <listentry>var/tmp</listentry>
            <listentry> <!-- subvolume not created by default -->
              <path>var/lib/nocow</path>
              <copy_on_write config:type="boolean">false</copy_on_write>
            </listentry>
            <listentry> <!-- redefine a subvolume created as nocow by default -->
              <path>var/lib/pgsql</path>
              <copy_on_write config:type="boolean">true</copy_on_write>
            </listentry>
          </subvolumes>
        </partition>
      </partitions>
      <pesize/>
      <type config:type="symbol">CT_DISK</type>
      <use>all</use>
    </drive>
  </partitioning>
  <ssh_import>
    <copy_config config:type="boolean">false</copy_config>
    <import config:type="boolean">false</import>
  </ssh_import>
  <networking>
    <dhcp_options>
      <dhclient_client_id/>
      <dhclient_hostname_option>AUTO</dhclient_hostname_option>
    </dhcp_options>
    <dns>
      <dhcp_hostname config:type="boolean">true</dhcp_hostname>
      <resolv_conf_policy>auto</resolv_conf_policy>
      <write_hostname config:type="boolean">false</write_hostname>
    </dns>
    <interfaces config:type="list">
      <interface>
        <bootproto>dhcp</bootproto>
        <device>eth0</device>
        <dhclient_set_default_route>yes</dhclient_set_default_route>
        <startmode>auto</startmode>
      </interface>
      <interface>
        <bootproto>static</bootproto>
        <device>lo</device>
        <firewall>no</firewall>
        <ipaddr>127.0.0.1</ipaddr>
        <netmask>255.0.0.0</netmask>
        <network>127.0.0.0</network>
        <prefixlen>8</prefixlen>
        <startmode>nfsroot</startmode>
        <usercontrol>no</usercontrol>
      </interface>
    </interfaces>
    <ipv6 config:type="boolean">true</ipv6>
    <keep_install_network config:type="boolean">true</keep_install_network>
    <setup_before_proposal config:type="boolean">true</setup_before_proposal>
    <managed config:type="boolean">false</managed>
    <routing>
      <ipv4_forward config:type="boolean">false</ipv4_forward>
      <ipv6_forward config:type="boolean">false</ipv6_forward>
    </routing>
  </networking>
  <software>
    <image/>
    <install_recommended config:type="boolean">false</install_recommended>
    <instsource/>
    <patterns config:type="list">
      <pattern>MicroOS</pattern>
      <pattern>Stack</pattern>
    </patterns>
    <!-- For the time being, these packages are needed by AutoYaST integration
         tests at this moment (aytests) -->
    <packages config:type="list">
      <!-- An SSH server is needed to perform the integration tests -->
      <package>openssh</package>
      <!-- The following packages are needed to run postinstall.sh -->
      <package>sudo</package>
      <package>curl</package>
      <package>ca-certificates-mozilla</package>
      <!-- Other missing packages -->
      <package>zypper</package>
      <package>wicked</package>
    </packages>
  </software>
  <services-manager>
    <default_target>multi-user</default_target>
    <services>
      <disable config:type="list">
        <service>purge-kernels</service>
      </disable>
      <enable config:type="list">
        <service>sshd</service>
        <service>cloud-init-local</service>
        <service>cloud-init</service>
        <service>cloud-config</service>
        <service>cloud-final</service>
        <service>issue-generator</service>
        <service>issue-add-ssh-keys</service>
	<service>salt-minion</service>
      </enable>
    </services>
  </services-manager>
  <scripts>
    <chroot-scripts config:type="list">
      <script>
        <filename>fix-services.sh</filename>
        <interpreter>shell</interpreter>
        <chrooted config:type="boolean">true</chrooted>
        <source>
<![CDATA[
#!/bin/sh
/usr/bin/systemctl enable sshd
/usr/bin/systemctl enable cloud-init-local cloud-init cloud-config cloud-final
/usr/bin/systemctl enable issue-generator issue-add-ssh-keys
/usr/bin/systemctl enable salt-minion
/usr/bin/systemctl disable purge-kernels
/usr/sbin/sshd-gen-keys-start
echo "master: some-master" > /etc/salt/minion.d/master.conf]]>
        </source>
      </script>
    </chroot-scripts>

    <pre-scripts config:type="list">
      <script>
        <filename>1_prescript.sh</filename>
        <interpreter>shell</interpreter>
        <location/>
        <feedback config:type="boolean">false</feedback>
        <feedback_type>error</feedback_type>
        <source><![CDATA[#!/bin/sh
BASE='/root/userscripts'
STR="1:prescript:"
ST='clean'
RES=`fdisk -l | grep -E '^/dev/vda'`
if [ -n "$RES" ];then
   STR=$STR'partition already defined:'
   ST='exist'
else
   STR=$STR'not yet mounted:'
fi
STR=$STR$ST
mkdir $BASE
echo $STR
echo $STR > $BASE/userscr.log
#cp /tmp/1_prescript.sh $BASE
        ]]></source>
      </script>
      <script>
        <filename>1b_prescript_remote.sh</filename>
        <interpreter>shell</interpreter>
        <source><![CDATA[#!/bin/sh
STR="1b:prescript-remote:ok"
BASE='/root/userscripts'
echo $STR
echo $STR >> $BASE/userscr.log
        ]]></source>
        <feedback config:type="boolean">false</feedback>
        <feedback_type>error</feedback_type>
      </script>
    </pre-scripts>

    <postpartitioning-scripts config:type="list">
      <script>
        <filename>2_postpartitioning.sh</filename>
        <interpreter>shell</interpreter>
        <location/>
        <feedback config:type="boolean">false</feedback>
        <feedback_type>error</feedback_type>
        <source><![CDATA[#!/bin/sh
STR="2:postpartitioning:"
ST='ok'
BASE='/root/userscripts'
RES=`df -T /dev/vda2 | grep -E '^/dev' | sed -r 's@.*\s+(.*)$@\1@'`
STR=$STR"sda2 mounted on "$RES":"
if [ "$RES" != '/mnt' ];then
   STR=$STR"invalid mountpoint!:"
   ST='fail'
fi
RES=`chroot /mnt rpm -qa | wc -l`
STR=$STR"rpm count "$RES":"
if [ "$RES" -ne '0' ];then
   STR=$STR' rpms already installed!:'
   ST='fail'
fi
STR=$STR$ST
echo $STR
echo $STR >> $BASE/userscr.log
#cp /tmp/2_postpartitioning.sh $BASE
        ]]></source>
      </script>
    </postpartitioning-scripts>
   </scripts>

  <users config:type="list">
    <user>
      <encrypted config:type="boolean">false</encrypted>
      <fullname>root</fullname>
      <gid>0</gid>
      <home>/root</home>
      <shell>/bin/bash</shell>
      <uid>0</uid>
      <user_password>nots3cr3t</user_password>
      <username>root</username>
    </user>
    <user>
      <encrypted config:type="boolean">false</encrypted>
      <fullname>vagrant</fullname>
      <gid>100</gid>
      <home>/home/vagrant</home>
      <shell>/bin/bash</shell>
      <uid>1000</uid>
      <user_password>nots3cr3t</user_password>
      <username>vagrant</username>
    </user>
  </users>
  <suse_register>
    <do_registration config:type="boolean">false</do_registration>
  </suse_register>
  <files config:type="list">
    <file>
      <file_path>/etc/salt/minion.d/master.conf</file_path>
      <file_contents>
<![CDATA[
master: master.example.net
]]>
      </file_contents>
      <file_owner>root.root</file_owner>
      <file_permissions>640</file_permissions>
    </file>
  </files>
  <kdump>
    <add_crash_kernel config:type="boolean">true</add_crash_kernel>
    <crash_kernel config:type="list">
      <listentry>72M,low</listentry>
      <listentry>32M,high</listentry>
    </crash_kernel>
    <general>
      <KDUMP_COMMANDLINE/>
      <KDUMP_COMMANDLINE_APPEND/>
      <KDUMP_COPY_KERNEL>yes</KDUMP_COPY_KERNEL>
      <KDUMP_DUMPFORMAT>lzo</KDUMP_DUMPFORMAT>
      <KDUMP_DUMPLEVEL>31</KDUMP_DUMPLEVEL>
      <KDUMP_FREE_DISK_SIZE>64</KDUMP_FREE_DISK_SIZE>
      <KDUMP_IMMEDIATE_REBOOT>yes</KDUMP_IMMEDIATE_REBOOT>
      <KDUMP_KEEP_OLD_DUMPS>10</KDUMP_KEEP_OLD_DUMPS>
      <KDUMP_KERNELVER/>
      <KDUMP_NOTIFICATION_CC/>
      <KDUMP_NOTIFICATION_TO/>
      <KDUMP_SAVEDIR>/var/crash</KDUMP_SAVEDIR>
      <KDUMP_SMTP_PASSWORD/>
      <KDUMP_SMTP_SERVER/>
      <KDUMP_SMTP_USER/>
      <KDUMP_TRANSFER/>
      <KDUMP_VERBOSE>3</KDUMP_VERBOSE>
      <KEXEC_OPTIONS/>
    </general>
  </kdump>

  <report>
    <errors>
      <log config:type="boolean">true</log>
      <show config:type="boolean">true</show>
      <!-- We expect error messages during installation. We will 'grep' for them. -->
      <timeout config:type="integer">5</timeout>
    </errors>
    <messages>
      <log config:type="boolean">true</log>
      <show config:type="boolean">true</show>
      <timeout config:type="integer">5</timeout>
    </messages>
    <warnings>
      <log config:type="boolean">true</log>
      <show config:type="boolean">true</show>
      <!-- We expect warnings during installation. We will 'grep' for them. -->
      <timeout config:type="integer">5</timeout>
    </warnings>
    <yesno_messages>
      <log config:type="boolean">true</log>
      <show config:type="boolean">true</show>
      <timeout config:type="integer">5</timeout>
    </yesno_messages>
  </report>

  <sshd>
    <comment>This is an obsolete section</comment>
  </sshd>
</profile>
